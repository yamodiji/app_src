name: Android CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.0'

    - name: Generate Gradle Wrapper (if missing)
      run: |
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Gradle wrapper JAR missing, generating..."
          gradle wrapper --gradle-version 8.0
        fi

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run unit tests
      run: ./gradlew test --stacktrace

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results
        path: 'app/build/test-results/testDebugUnitTest/TEST-*.xml'
        reporter: java-junit

  lint:
    name: Run Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.0'

    - name: Generate Gradle Wrapper (if missing)
      run: |
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Gradle wrapper JAR missing, generating..."
          gradle wrapper --gradle-version 8.0
        fi

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run lint
      run: ./gradlew lintDebug --stacktrace

    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: app/build/reports/lint-results-debug.html

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.0'

    - name: Generate Gradle Wrapper (if missing)
      run: |
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Gradle wrapper JAR missing, generating..."
          gradle wrapper --gradle-version 8.0
        fi

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build debug APK
      run: ./gradlew assembleDebug --stacktrace

    - name: Verify debug APK exists
      run: |
        ls -la app/build/outputs/apk/debug/
        if [ ! -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "Debug APK not found!"
          exit 1
        fi

    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: Build release APK
      run: ./gradlew assembleRelease --stacktrace

    - name: Verify release APK exists
      run: |
        ls -la app/build/outputs/apk/release/
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "Found signed release APK"
          echo "RELEASE_APK_PATH=app/build/outputs/apk/release/app-release.apk" >> $GITHUB_ENV
        elif [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          echo "Found unsigned release APK"
          echo "RELEASE_APK_PATH=app/build/outputs/apk/release/app-release-unsigned.apk" >> $GITHUB_ENV
        else
          echo "No release APK found!"
          exit 1
        fi

    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: ${{ env.RELEASE_APK_PATH }}

  instrumented-tests:
    name: Run Instrumented Tests
    runs-on: macos-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.0'

    - name: Generate Gradle Wrapper (if missing)
      run: |
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Gradle wrapper JAR missing, generating..."
          gradle wrapper --gradle-version 8.0
        fi

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: ./gradlew connectedAndroidTest --stacktrace

  auto-release:
    name: Auto Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, lint, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from app/build.gradle
      id: get_version
      run: |
        VERSION_NAME=$(grep "versionName" app/build.gradle | cut -d '"' -f2)
        VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        TAG_NAME="v${VERSION_NAME}-${VERSION_CODE}"
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=Fast App Drawer v$VERSION_NAME (Build $VERSION_CODE)" >> $GITHUB_OUTPUT

    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk
        path: ./release-artifacts

    - name: Download debug APK
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: ./debug-artifacts

    - name: List downloaded artifacts
      run: |
        echo "Release artifacts:"
        ls -la ./release-artifacts/
        echo "Debug artifacts:"
        ls -la ./debug-artifacts/

    - name: Determine APK filenames
      id: apk_files
      run: |
        if [ -f "./release-artifacts/app-release.apk" ]; then
          echo "release_apk=./release-artifacts/app-release.apk" >> $GITHUB_OUTPUT
          echo "release_name=signed"
        elif [ -f "./release-artifacts/app-release-unsigned.apk" ]; then
          echo "release_apk=./release-artifacts/app-release-unsigned.apk" >> $GITHUB_OUTPUT
          echo "release_name=unsigned"
        else
          echo "No release APK found in artifacts!"
          exit 1
        fi
        echo "debug_apk=./debug-artifacts/app-debug.apk" >> $GITHUB_OUTPUT

    - name: Create Release with APKs
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        name: ${{ steps.get_version.outputs.release_name }}
        body: |
          ## Fast App Drawer ${{ steps.get_version.outputs.version_name }}
          
          ### Changes in this release:
          - Built from commit: ${{ github.sha }}
          - Build number: ${{ steps.get_version.outputs.version_code }}
          
          ### Downloads:
          - **FastAppDrawer-${{ steps.get_version.outputs.tag_name }}-release.apk**: Production-ready APK for installation
          - **FastAppDrawer-${{ steps.get_version.outputs.tag_name }}-debug.apk**: Debug version with additional logging
          
          ### Installation:
          1. Download the release APK
          2. Enable "Install from unknown sources" in your Android settings
          3. Install the APK file
          
          Built automatically from the latest commit on main branch.
        draft: false
        prerelease: false
        files: |
          ${{ steps.apk_files.outputs.release_apk }}
          ${{ steps.apk_files.outputs.debug_apk }}

    - name: Rename and organize release assets
      run: |
        mkdir -p release-files
        cp ${{ steps.apk_files.outputs.release_apk }} ./release-files/FastAppDrawer-${{ steps.get_version.outputs.tag_name }}-release.apk
        cp ${{ steps.apk_files.outputs.debug_apk }} ./release-files/FastAppDrawer-${{ steps.get_version.outputs.tag_name }}-debug.apk
        ls -la ./release-files/ 